/*
 * Copyright 2013, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.6.5'
}

apply plugin: 'antlr'

version = '0.06'

def versionSuffix
try {
    def git = org.eclipse.jgit.api.Git.open(file('..'))
    def head = git.getRepository().getRef('HEAD')
    versionSuffix = head.getObjectId().abbreviate(8).name()

    if (!git.status().call().clean) {
        versionSuffix += '-dirty'
    }
} catch (Exception ex) {
    // In case we can't get the commit for some reason,
    // just use -dev
    versionSuffix = 'dev'
}

def baseVersion = version
version = baseVersion + '-' + versionSuffix

sourceCompatibility = 1.8
targetCompatibility = 1.8


intellij {
    version '2020.3.2'
    plugins 'java'
    updateSinceUntilBuild false
}

repositories {
    mavenCentral()
}

configurations {
    priorityImplementation
}
sourceSets.main.compileClasspath = configurations.priorityImplementation + sourceSets.main.compileClasspath

dependencies {
    // This is a bit of a hack to force smali and dexlib2 to be added to the compile classpath
    // before the IntelliJ IDEA sources - which also contain an older version of these libraries.
    priorityImplementation group: 'org.smali', name: 'smali', version: '2.5.0'
    priorityImplementation group: 'org.smali', name: 'dexlib2', version: '2.5.0'

    implementation group: 'org.smali', name: 'smali', version: '2.5.0'
    implementation group: 'org.smali', name: 'dexlib2', version: '2.5.0'
    implementation group: 'org.antlr', name: 'antlr-runtime', version: '3.5.2'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.3.1'

    antlr group: 'org.antlr', name: 'antlr', version: '3.5.2'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task extractTokens(type: org.gradle.api.tasks.Copy) {
    project.afterEvaluate {
        def allArtifacts = configurations.default.resolvedConfiguration.resolvedArtifacts
        def smaliArtifact = allArtifacts.find { it.moduleVersion.id.name.equals('smali') }

        from(zipTree(smaliArtifact.file)) {
            include '**/*.tokens'
        }
        into "${buildDir}/tokens"
    }
}

generateGrammarSource {
    def tokensDir = file("${buildDir}/tokens/org/jf/smali")
    inputs.file new File(tokensDir, 'smaliParser.tokens')
    setArguments(['-lib', tokensDir.path])
    outputDirectory(file("${buildDir}/generated-src/antlr/main/org/jf/smalidea"))
}
generateGrammarSource.dependsOn(extractTokens)

wrapper {
    gradleVersion = '6.8.2'
    distributionType = Wrapper.DistributionType.ALL
}